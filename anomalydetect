#AI-Based Anomaly Detection: Deploy ML-powered network security using Zeek or TensorFlow
sudo apt update
sudo apt install cmake make gcc g++ flex bison libpcap-dev libssl-dev python3-dev zlib1g-dev
wget https://download.zeek.org/zeek-4.x.x.tar.gz
tar -xvzf zeek-4.x.x.tar.gz
cd zeek-4.x.x
./configure
make
sudo make install
echo "export PATH=/usr/local/zeek/bin:$PATH" >> ~/.bashrc
source ~/.bashrc
ip a
zeekctl deploy
zeekctl start
zeekctl status
cat conn.log | zeek-cut id.orig_h id.resp_h id.resp_p proto duration orig_bytes resp_bytes > conn.csv
cat conn.log | zeek-cut id.orig_h id.resp_h id.resp_p proto duration orig_bytes resp_bytes > conn.csv
import pandas as pd

data = pd.read_csv("conn.csv")

data.fillna(0, inplace=True)
data['duration'] = data['duration'].astype(float)
data_normalized = (data - data.mean()) / data.std()
data_normalized.to_csv("processed_conn.csv", index=False)
from sklearn.ensemble import IsolationForest
from sklearn.model_selection import train_test_split

data = pd.read_csv("processed_conn.csv")
X_train, X_test = train_test_split(data, test_size=0.2)

model = IsolationForest(contamination=0.05, random_state=42)
model.fit(X_train)

import joblib
joblib.dump(model, "anomaly_detector.pkl")
predictions = model.predict(X_test)
print(f"Anomalies detected: {sum(predictions == -1)}")
@load base/protocols/conn

event zeek_init() {
    print "Anomaly Detection Started";
}

event connection_state_remove(c: connection) {
    local log_string = fmt("%s,%s,%s,%s,%s,%s,%s",
                           c$id$orig_h, c$id$resp_h, c$id$resp_p, 
                           c$proto, c$duration, c$orig_bytes, c$resp_bytes);

    system(fmt("python3 detect_anomalies.py '%s'", log_string));
}
import sys
import joblib
import pandas as pd

model = joblib.load("anomaly_detector.pkl")

input_data = sys.argv[1].split(',')
columns = ['orig_h', 'resp_h', 'resp_p', 'proto', 'duration', 'orig_bytes', 'resp_bytes']
df = pd.DataFrame([input_data], columns=columns)

df.fillna(0, inplace=True)
df['duration'] = df['duration'].astype(float)

prediction = model.predict(df)
if prediction[0] == -1:
    print("Anomaly detected:", df.to_dict(orient="records"))
cp anomaly_detection.zeek /usr/local/zeek/share/zeek/site/
echo "@load anomaly_detection" >> /usr/local/zeek/share/zeek/site/local.zeek
zeekctl deploy
hping3 -S -p 80 -i u100 192.168.1.1
cat /usr/local/zeek/logs/current/
